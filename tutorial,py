import csv
import matplotlib.pyplot as plt
import networkx as nx
import urllib.request


def save_data(url="https://raw.githubusercontent.com/jpatokal/openflights/master/data/airports.dat",
              output="airports_db.dat"):
    response = urllib.request.urlopen(url)
    data = response.read()

    with open(output, "wb") as file:
        file.write(data)


# 1. Data Import
# save_data()
# save_data(url="https://raw.githubusercontent.com/jpatokal/openflights/master/data/routes.dat",
#           output="routes_db.dat")

f = open("airports_db.dat", encoding = "utf8")

airport_db = []
errors = 0
for airport in csv.reader(f, delimiter=','):
    current_record = []
    try:
        #each slots containing information about an airport
        current_record.append(int(airport[0])) #airport ID
        current_record.append(airport[1])
        current_record.append(airport[2])
        current_record.append(airport[3])
        current_record.append(airport[4])
        current_record.append(airport[5])
        current_record.append(float(airport[6]))
        current_record.append(float(airport[7]))
        current_record.append(float(airport[8]))
        current_record.append(float(airport[9]))
        current_record.append(airport[10])
        current_record.append(airport[11])
        current_record.append(airport[12])
        current_record.append(airport[13])
    except :
        errors += 1
    else:
        airport_db.append(current_record)
print("Total Airport Imported : ", len(airport_db),
 "# of Errors : ", errors)


f = open("routes_db.dat", encoding="utf8")
route_db = []
errors = 0
for route in csv.reader(f, delimiter=','):
    current_record = []
    try:
        current_record.append(route[0])
        current_record.append(int(route[1]))
        current_record.append(int(route[3]))
        current_record.append(int(route[5]))
        current_record.append(int(route[7]))
        current_record.append(route[8])
    except:
        errors += 1
    else:
        route_db.append(current_record)
print("Total Routes Imported : ", len(route_db), "# of Errors : ", errors)

# 2. Data Manipulation
network = nx.Graph()

# Nodes: airports
for airport in airport_db:
    network.add_node(airport[0], id=airport[0], name=airport[1], city=airport[2],
                     country=airport[3], iata=airport[4],
                     icao=airport[5],
                     lat=airport[6],
                     long=airport[7],
                     alt=airport[8], offset=airport[9],
                     daylight=airport[10], timezone=airport[11],
                     type=airport[12], source=airport[13])

# Edges: routes
for route in route_db:
    if route[2] in network.nodes() and route[3] in network.nodes:
        network.add_edge(route[2], route[3], airline=route[0],
                         airline_id=route[1], stops=route[4],
                         equipment=route[5])

# network.nodes[507]
# network.edges[507,100]
# network.nodes[100]

# for i in list(network.neighbors(2650)):
#     print(network.nodes[i]['id'], " - ", network.nodes[i]["name"], " - ", network.nodes[i]["country"])

# print(nx.info(network, 2650))

# Density of network
# nx.density(network)

# fully connected graph ?
# nx.is_connected(network)

# Centrality: measure of the importance of each node in the network
degree_centrality = nx.degree_centrality(network)

# add the centrality values to our nodes
for airport, centrality_value in degree_centrality.items(): network.nodes[airport]['degree_centrality'] = centrality_value
network.nodes[507]['degree_centrality']

# path between two nodes
# nx.has_path(network, source= 507, target = 100)
# nx.has_path(network, source= 507, target = 20)

# network.degree()
# remove nodes without edges
for airport, degree in list(network.degree()):
    if degree == 0:
        network.remove_node(airport)
nx.info(network)

# nx.is_connected(network)

# Evaluate the subgraphs within our graph
# nx.number_connected_components(network)

print([len(e) for e in nx.connected_components(network)])

# By going that, we can see that there is a subnetwork containing the bulk of our airports (3077) and small
# subnetworks that are not connected to the main one. This is maybe due to the fact that they link so many
# regional airports within a country or something similar to that. Since they are not a lot, we can easily
# disregard those values. So letâ€™s go ahead and save the subgraph 3077 in a new variable that will be used
# to display the network

main_subgraph = max(nx.connected_components(network), key=len)
network_main = network.subgraph(main_subgraph)
# nx.info(network_main)

# 3. Network Visualization
for airport in network_main.nodes():
    network_main.nodes[airport]['coordinates'] = (network_main.nodes[airport]['long'],
                                                  network_main.nodes[airport]['lat'])

# nx.draw(network_main, nx.get_node_attributes(network_main, 'coordinates'), node_shape='.', node_size=3)
# plt.show()
# plt.figure(figsize = (20, 15))
# nx.draw_networkx_nodes(network_main, nx.get_node_attributes(network_main, 'coordinates'), node_shape='.', node_size=6)
# nx.draw_networkx_edges(network_main, nx.get_node_attributes(network_main, 'coordinates'), width=0.3, alpha=0.5)
# plt.show()

maximum_centrality = max(degree_centrality.values())
for airport in network_main.nodes():
    if network_main.nodes[airport]['timezone'].find('Europe') == 0:
        network_main.nodes[airport]['color'] = 'blue'
    elif network_main.nodes[airport]['timezone'].find('Asia') == 0:
        network_main.nodes[airport]['color'] = 'red'
    elif network_main.nodes[airport]['timezone'].find('Africa') == 0:
        network_main.nodes[airport]['color'] = 'yellow'
    elif network_main.nodes[airport]['timezone'].find('America') == 0:
        network_main.nodes[airport]['color'] = 'green'
    elif network_main.nodes[airport]['timezone'].find('Australia') == 0:
        network_main.nodes[airport]['color'] = 'orange'
    elif network_main.nodes[airport]['timezone'].find('Pacific') == 0:
        network_main.nodes[airport]['color'] = 'purple'
    else:
        network_main.nodes[airport]['color'] = 'grey'

    if network_main.nodes[airport]['degree_centrality'] >= maximum_centrality * .9:
        network_main.nodes[airport]['importance'] = 400
    elif network_main.nodes[airport]['degree_centrality'] >= maximum_centrality * .5:
        network_main.nodes[airport]['importance'] = 150
    else:
        network_main.nodes[airport]['importance'] = 10

for route in network_main.edges():
    if (network_main[route[0]][route[1]]['airline'] == "TK"):
        network_main[route[0]][route[1]]['color'] = 'red'
        network_main[route[0]][route[1]]['size'] = 1.5
    elif (network_main[route[0]][route[1]]['airline'] == "US"):
        network_main[route[0]][route[1]]['color'] = 'blue'
        network_main[route[0]][route[1]]['size'] = 1.5
    else:
        network_main[route[0]][route[1]]['color'] = 'grey'
        network_main[route[0]][route[1]]['size'] = 0.2

plt.figure(figsize=(20, 15))
nx.draw_networkx_nodes(network_main, nx.get_node_attributes(network_main, 'coordinates'), node_shape = '.' ,
                       node_size=[importance for importance in nx.get_node_attributes(network_main, 'importance').values()],
                       node_color=[color for color in nx.get_node_attributes(network_main, 'color').values()])
nx.draw_networkx_edges(network_main, nx.get_node_attributes(network_main, 'coordinates'),
                       width=[size for size in nx.get_edge_attributes(network_main, 'size').values()],
                       edge_color=[color for color in nx.get_edge_attributes(network_main, 'color').values()],
                       alpha=0.1)

plt.show()
